{"version":3,"sources":["components/form/Form.module.scss","pages/loginPage/LoginPage.module.scss","components/header/nav/Nav.module.scss","components/input/Input.module.scss","pages/usersList/UsersListPage.module.scss","pages/page404/PageNotFound.module.scss","components/button/Button.module.scss","components/navItem/NavItem.module.scss","components/preloader/Preloader.module.scss","App.module.scss","services/auth-api.ts","store/reducers/auth-reducer.ts","components/button/Button.tsx","components/navItem/NavItem.tsx","components/header/nav/Nav.tsx","components/header/Header.tsx","components/preloader/Preloader.tsx","services/user-api.ts","store/reducers/user-reducer.ts","components/input/Input.tsx","components/form/Form.tsx","pages/createNewUserPage/CreateNewUserPage.tsx","pages/createNewUserPage/CreateNewUserPageContainer.tsx","pages/loginPage/LoginPage.tsx","pages/loginPage/LoginPageContainer.tsx","pages/page404/PageNotFound.tsx","pages/updateUserPage/UpdateUserPage.tsx","pages/updateUserPage/UpdateUserPageContainer.tsx","pages/usersList/UsersListPage.tsx","pages/usersList/UsersListPageContainer.tsx","components/routes/Routes.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","authAPI","data","post","logInUserInAppTC","createAsyncThunk","a","username","password","rejectWithValue","dispatch","response","setTimeout","setErrorText","error","statusText","message","authSlice","createSlice","name","initialState","userData","isLoading","isLoggedSuccess","initApp","token","reducers","setLoginUserData","state","action","payload","setLogoutUserData","setIsLoading","setInitApp","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","Button","React","memo","btnType","btnName","rest","buttonClasses","classes","button","className","NavItem","path","title","to","navItem","activeClassName","active","NavLogOut","logOut","logOut__title","NavLogIn","logout","logIn","logIn__block","links","onClick","Header","useDispatch","useSelector","auth","logoutHandler","useCallback","Preloader","container","ldsFacebook","userAPI","get","headers","Authorization","id","put","fetchAllUsers","createNewUserTC","getState","updateUserTC","checkedUserForUpdatingId","user","userSlice","allUsers","createNewUser","isCreateSuccess","isUpdateSuccess","setNewUserFlag","setIsCreateSuccess","setIsUpdateSuccess","setCheckedUserIdForUpdating","Input","label","errorCondition","errorText","input","input__label","input__elem","input__error","inputs__error_text","Form","formLabel","handleOnSubmit","backHandler","formik","useFormik","initialValues","first_name","last_name","validate","values","errors","test","length","onSubmit","trim","is_active","block","block__container","block__form","handleSubmit","block__title","block__inputs","placeholder","touched","getFieldProps","type","block__buttons","disabled","isValid","resetForm","infoTextRed","loading","CreateNewUserPage","CreateNewUserPageContainer","LoginPage","login","login__container","login__form","login__title","login__inputs","login__buttons","LoginPageContainer","PageNotFound","history","useHistory","wrap","subtitle","push","UpdateUserPage","UpdateUserPageContainer","UsersListPage","updateUserHandler","wrapper","usersList","map","u","userCard","infoBlock","last_login","toString","is_superuser","UsersListPageContainer","userId","useEffect","Routes","render","exact","App","main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","reducer","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbd29d92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Form_block__2Qq-z\",\"block__container\":\"Form_block__container__3YMwO\",\"block__form\":\"Form_block__form__3GpDn\",\"block__inputs\":\"Form_block__inputs__3mGkJ\",\"block__buttons\":\"Form_block__buttons__kkvnJ\",\"loading\":\"Form_loading__3afDW\",\"checkbox\":\"Form_checkbox__1Uw9I\",\"infoTextRed\":\"Form_infoTextRed__2pwUe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"LoginPage_login__3_Vqa\",\"login__container\":\"LoginPage_login__container__2d98I\",\"login__form\":\"LoginPage_login__form__9yCID\",\"login__inputs\":\"LoginPage_login__inputs__tOYSc\",\"login__checkbox\":\"LoginPage_login__checkbox__33wPC\",\"login__buttons\":\"LoginPage_login__buttons__1wuJK\",\"loading\":\"LoginPage_loading__2RSyg\",\"checkbox\":\"LoginPage_checkbox__291M-\",\"infoTextRed\":\"LoginPage_infoTextRed__1YMYB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logOut\":\"Nav_logOut__35K61\",\"logOut__title\":\"Nav_logOut__title__32tZ9\",\"logIn\":\"Nav_logIn__3zc1Q\",\"logIn__block\":\"Nav_logIn__block__3PVuY\",\"title\":\"Nav_title__LJNJ-\",\"links\":\"Nav_links__RLil5\",\"button\":\"Nav_button__31py2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3RC84\",\"input__label\":\"Input_input__label__1Dvda\",\"input__elem\":\"Input_input__elem__1i4hv\",\"input__error\":\"Input_input__error__34Z2R\",\"inputs__error_text\":\"Input_inputs__error_text__1zq1v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UsersListPage_wrapper__3JD5x\",\"usersList\":\"UsersListPage_usersList__2-5QG\",\"userCard\":\"UsersListPage_userCard__2Vwnq\",\"infoBlock\":\"UsersListPage_infoBlock__ojpGv\",\"infoTextRed\":\"UsersListPage_infoTextRed__26UZw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"PageNotFound_wrap__4pylf\",\"title\":\"PageNotFound_title__1DB6y\",\"subtitle\":\"PageNotFound_subtitle__O7fzB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3-f6D\",\"green\":\"Button_green__wmmB-\",\"red\":\"Button_red__2XI6A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navItem\":\"NavItem_navItem__2Oilc\",\"active\":\"NavItem_active__2slWZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Preloader_container__24fNR\",\"ldsFacebook\":\"Preloader_ldsFacebook__fDg7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__36vaU\",\"App-logo\":\"App_App-logo__3CMNe\",\"App-logo-spin\":\"App_App-logo-spin__2cVOJ\",\"App-header\":\"App_App-header__3Rsqj\",\"App-link\":\"App_App-link__1wFJg\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://emphasoft-test-assignment.herokuapp.com/\",\r\n});\r\n\r\nexport const authAPI = {\r\n    logInUserInApp(data: TokenRequestType) {\r\n        return instance.post<{ token: string }>(\"api-token-auth/\", data);\r\n    },\r\n};\r\n\r\nexport type TokenRequestType = {\r\n    username: string;\r\n    password: string;\r\n};\r\n\r\nexport type RequestRegisterType = {\r\n    email: string;\r\n    password: string;\r\n};\r\n\r\nexport type RequestLogInType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n};\r\n\r\nexport type RequestNewPasswordType = {\r\n    password: string;\r\n    resetPasswordToken: string;\r\n};\r\n\r\nexport type RequestResetPasswordType = {\r\n    email: string;\r\n    from: string;\r\n    message: string;\r\n};\r\n\r\nexport type UserDataType = {\r\n    username: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    password: string;\r\n    is_active: boolean;\r\n};\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { authAPI, TokenRequestType } from \"../../services/auth-api\";\r\nimport { ErrorType } from \"../../utils/types\";\r\nimport { RootStateType } from \"../store\";\r\n\r\nconst initialState = {\r\n    userData: null as TokenRequestType | null,\r\n    isLoading: false,\r\n    isLoggedSuccess: false,\r\n    initApp: \"idle\" as StatusType,\r\n    token: \"\",\r\n    error: \"\",\r\n};\r\n\r\nexport const logInUserInAppTC = createAsyncThunk<\r\n    { token: string },\r\n    { username: string; password: string },\r\n    { rejectValue: string; state: RootStateType }\r\n>(\r\n    \"login/logInUserInApp\",\r\n    async ({ username, password }, { rejectWithValue, dispatch }) => {\r\n        try {\r\n            const response = await authAPI.logInUserInApp({\r\n                username,\r\n                password,\r\n            });\r\n            return response.data;\r\n        } catch (e) {\r\n            setTimeout(dispatch, 5000, setErrorText({ error: \"\" }));\r\n            const error: ErrorType = e;\r\n            return rejectWithValue(\r\n                error.response ? error.response.statusText : e.message\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport const authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState,\r\n    reducers: {\r\n        setLoginUserData: (state, action: PayloadAction<TokenRequestType>) => {\r\n            state.userData = action.payload;\r\n        },\r\n        setLogoutUserData: (state) => {\r\n            state.userData = null;\r\n            state.token = \"\";\r\n            state.initApp = \"idle\";\r\n            state.isLoggedSuccess = false;\r\n        },\r\n        setIsLoading: (state, action: PayloadAction<boolean>) => {\r\n            state.isLoading = action.payload;\r\n        },\r\n        setInitApp: (state, action: PayloadAction<{ initApp: StatusType }>) => {\r\n            state.initApp = action.payload.initApp;\r\n        },\r\n        setErrorText: (state, action: PayloadAction<{ error: string }>) => {\r\n            state.error = action.payload.error;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(logInUserInAppTC.pending, (state, action) => {\r\n                state.isLoading = true;\r\n                state.error = \"\";\r\n            })\r\n            .addCase(logInUserInAppTC.fulfilled, (state, action) => {\r\n                state.token = action.payload.token;\r\n                state.initApp = \"succeeded\";\r\n                state.isLoggedSuccess = true;\r\n                state.isLoading = false;\r\n            })\r\n            .addCase(logInUserInAppTC.rejected, (state, action) => {\r\n                if (action.payload) {\r\n                    state.isLoading = false;\r\n                    state.error = action.payload;\r\n                }\r\n            });\r\n    },\r\n});\r\nexport const {\r\n    setLoginUserData,\r\n    setLogoutUserData,\r\n    setIsLoading,\r\n    setInitApp,\r\n    setErrorText,\r\n} = authSlice.actions;\r\n\r\nexport type StatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n","import React, { ButtonHTMLAttributes } from \"react\";\r\nimport classes from \"./Button.module.scss\";\r\n\r\ninterface PropsType extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n    btnName: string;\r\n    btnType?: \"green\" | \"red\";\r\n}\r\n\r\nexport const Button = React.memo(({ btnType, btnName, ...rest }: PropsType) => {\r\n    let buttonClasses = `${classes.button} ${\r\n        classes[btnType as \"green\" | \"red\"]\r\n    }`;\r\n\r\n    return (\r\n        <button className={buttonClasses} {...rest}>\r\n            {btnName}\r\n        </button>\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./NavItem.module.scss\";\r\n\r\ntype PropsType = {\r\n    path: string;\r\n    title: string;\r\n};\r\n\r\nconst NavItem: React.FC<PropsType> = ({ path, title }) => {\r\n    return (\r\n        <NavLink\r\n            to={path}\r\n            className={classes.navItem}\r\n            activeClassName={classes.active}\r\n        >\r\n            {title}\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import { Button } from \"../../button/Button\";\r\nimport NavItem from \"../../navItem/NavItem\";\r\nimport classes from \"./Nav.module.scss\";\r\n\r\nexport const NavLogOut = () => {\r\n    return (\r\n        <nav className={classes.logOut}>\r\n            <div className={classes.logOut__title}>\r\n                <h2>Emphasoft test</h2>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\ntype NavLogInPropsType = {\r\n    logout: () => void;\r\n};\r\n\r\nexport const NavLogIn = ({ logout }: NavLogInPropsType) => {\r\n    return (\r\n        <nav className={classes.logIn}>\r\n            <div className={classes.logIn__block}>\r\n                <div className={classes.title}>\r\n                    <h2>Emphasoft test</h2>\r\n                </div>\r\n                <div className={classes.links}>\r\n                    <NavItem\r\n                        path={\"/emphasoft-test/create-new-user\"}\r\n                        title={\"Create new user\"}\r\n                    />\r\n                </div>\r\n                <div className={classes.button}>\r\n                    <Button\r\n                        onClick={logout}\r\n                        btnName={\"Logout\"}\r\n                        btnType={\"red\"}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setLogoutUserData } from \"../../store/reducers/auth-reducer\";\r\nimport { RootStateType } from \"../../store/store\";\r\nimport { NavLogIn, NavLogOut } from \"./nav/Nav\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n    const token = useSelector<RootStateType, string>(\r\n        (state) => state.auth.token\r\n    );\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(setLogoutUserData());\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (!token) return <NavLogOut />;\r\n\r\n    return <NavLogIn logout={logoutHandler} />;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport classes from \"./Preloader.module.scss\";\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.ldsFacebook}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://emphasoft-test-assignment.herokuapp.com/\",\r\n});\r\n\r\nexport const userAPI = {\r\n    fetchUsers(token: string) {\r\n        return instance.get<Array<ListUserType>>(\"api/v1/users/\", {\r\n            headers: { Authorization: `Token ${token}` },\r\n        });\r\n    },\r\n    createNewUser(token: string, data: NewUserType) {\r\n        return instance.post<ListUserType>(\"api/v1/users/\", data, {\r\n            headers: { Authorization: `Token ${token}` },\r\n        });\r\n    },\r\n    updateUser(token: string, id: number | null, data: NewUserType) {\r\n        return instance.put<ListUserType>(`api/v1/users/${id}/`, data, {\r\n            headers: { Authorization: `Token ${token}` },\r\n        });\r\n    },\r\n};\r\n\r\nexport type ListUserType = {\r\n    id: number;\r\n    username: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    is_active: boolean;\r\n    last_login: string | null;\r\n    is_superuser: boolean;\r\n};\r\n\r\nexport type NewUserType = {\r\n    username: string;\r\n    first_name?: string;\r\n    last_name?: string;\r\n    password: string;\r\n    is_active: boolean;\r\n};\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { ListUserType, NewUserType, userAPI } from \"../../services/user-api\";\r\nimport { ErrorType } from \"../../utils/types\";\r\nimport { RootStateType } from \"../store\";\r\nimport { setErrorText, setIsLoading } from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    allUsers: [] as Array<ListUserType>,\r\n    createNewUser: false,\r\n    checkedUserForUpdatingId: null as number | null,\r\n    isCreateSuccess: false,\r\n    isUpdateSuccess: false,\r\n};\r\n\r\nexport const fetchAllUsers = createAsyncThunk<\r\n    ListUserType[],\r\n    string,\r\n    { rejectValue: string; state: RootStateType }\r\n>(\"user/fetchAllUsers\", async (token, { rejectWithValue, dispatch }) => {\r\n    dispatch(setIsLoading(true));\r\n    try {\r\n        const response = await userAPI.fetchUsers(token);\r\n        dispatch(setIsLoading(false));\r\n        return response.data;\r\n    } catch (e) {\r\n        setTimeout(dispatch, 5000, setErrorText({ error: \"\" }));\r\n        const error: ErrorType = e;\r\n        dispatch(setErrorText({ error: error.response.statusText }));\r\n        dispatch(setIsLoading(false));\r\n        return rejectWithValue(\r\n            error.response ? error.response.statusText : e.message\r\n        );\r\n    }\r\n});\r\n\r\nexport const createNewUserTC = createAsyncThunk<\r\n    ListUserType,\r\n    NewUserType,\r\n    { rejectValue: string; state: RootStateType }\r\n>(\r\n    \"user/createNewUserTC\",\r\n    async (data, { rejectWithValue, getState, dispatch }) => {\r\n        const { token } = getState().auth;\r\n        dispatch(setIsLoading(true));\r\n        try {\r\n            const response = await userAPI.createNewUser(token, data);\r\n            dispatch(setIsLoading(false));\r\n            return response.data;\r\n        } catch (e) {\r\n            setTimeout(dispatch, 5000, setErrorText({ error: \"\" }));\r\n            const error: ErrorType = e;\r\n            dispatch(setErrorText({ error: error.response.statusText }));\r\n            dispatch(setIsLoading(false));\r\n            return rejectWithValue(\r\n                error.response ? error.response.statusText : e.message\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateUserTC = createAsyncThunk<\r\n    ListUserType,\r\n    NewUserType,\r\n    { rejectValue: string; state: RootStateType }\r\n>(\r\n    \"user/updateUserTC\",\r\n    async (data, { rejectWithValue, getState, dispatch }) => {\r\n        const { token } = getState().auth;\r\n        const { checkedUserForUpdatingId } = getState().user;\r\n        dispatch(setIsLoading(true));\r\n        try {\r\n            const response = await userAPI.updateUser(\r\n                token,\r\n                checkedUserForUpdatingId,\r\n                data\r\n            );\r\n            dispatch(setIsLoading(false));\r\n            return response.data;\r\n        } catch (e) {\r\n            setTimeout(dispatch, 5000, setErrorText({ error: \"\" }));\r\n            const error: ErrorType = e;\r\n            dispatch(setErrorText({ error: error.response.statusText }));\r\n            dispatch(setIsLoading(false));\r\n            return rejectWithValue(\r\n                error.response ? error.response.statusText : e.message\r\n            );\r\n        }\r\n    }\r\n);\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    reducers: {\r\n        setNewUserFlag: (state, action: PayloadAction<boolean>) => {\r\n            state.createNewUser = action.payload;\r\n        },\r\n        setIsCreateSuccess: (state, action: PayloadAction<boolean>) => {\r\n            state.isCreateSuccess = action.payload;\r\n        },\r\n        setIsUpdateSuccess: (state, action: PayloadAction<boolean>) => {\r\n            state.isUpdateSuccess = action.payload;\r\n        },\r\n        setCheckedUserIdForUpdating: (\r\n            state,\r\n            action: PayloadAction<number | null>\r\n        ) => {\r\n            state.checkedUserForUpdatingId = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchAllUsers.fulfilled, (state, action) => {\r\n                state.allUsers = action.payload;\r\n            })\r\n            .addCase(createNewUserTC.pending, (state) => {\r\n                state.isCreateSuccess = false;\r\n            })\r\n            .addCase(createNewUserTC.fulfilled, (state) => {\r\n                state.isCreateSuccess = true;\r\n            })\r\n            .addCase(updateUserTC.pending, (state) => {\r\n                state.isUpdateSuccess = false;\r\n            })\r\n            .addCase(updateUserTC.fulfilled, (state) => {\r\n                state.isUpdateSuccess = true;\r\n                state.checkedUserForUpdatingId = null;\r\n            });\r\n    },\r\n});\r\nexport const {\r\n    setNewUserFlag,\r\n    setIsCreateSuccess,\r\n    setCheckedUserIdForUpdating,\r\n} = userSlice.actions;\r\n","import React, { InputHTMLAttributes } from \"react\";\r\nimport classes from \"./Input.module.scss\";\r\n\r\ninterface PropsType extends InputHTMLAttributes<HTMLInputElement> {\r\n    label?: string;\r\n    errorText?: string;\r\n    errorCondition?: boolean;\r\n}\r\n\r\nexport const Input = React.memo(\r\n    ({ label, errorCondition, errorText, ...rest }: PropsType) => {\r\n        return (\r\n            <div className={classes.input}>\r\n                <p className={classes.input__label}>{label}</p>\r\n                <input\r\n                    className={`${classes.input__elem} ${\r\n                        errorCondition ? classes.input__error : \"\"\r\n                    }`}\r\n                    {...rest}\r\n                />\r\n                {errorCondition ? (\r\n                    <div className={classes.inputs__error_text}>\r\n                        {errorText}\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport classes from \"./Form.module.scss\";\r\nimport { NewUserType } from \"../../services/user-api\";\r\nimport { Input } from \"../input/Input\";\r\nimport { Button } from \"../button/Button\";\r\nimport NavItem from \"../navItem/NavItem\";\r\n\r\ntype FormPropsType = {\r\n    formLabel: string;\r\n    btnName: string;\r\n    isLoading: boolean;\r\n    error: string;\r\n    handleOnSubmit: (data: NewUserType) => void;\r\n    backHandler?: () => void;\r\n};\r\n\r\ntype FormikErrorType = {\r\n    username?: string;\r\n    first_name?: string;\r\n    last_name?: string;\r\n    password?: string;\r\n};\r\n\r\nconst Form: React.FC<FormPropsType> = React.memo(\r\n    ({ formLabel, btnName, error, isLoading, handleOnSubmit, backHandler }) => {\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                username: \"\",\r\n                first_name: \"\",\r\n                last_name: \"\",\r\n                password: \"\",\r\n            },\r\n            validate: (values) => {\r\n                const errors: FormikErrorType = {};\r\n                if (!values.username) {\r\n                    errors.username = \"Required!\";\r\n                } else if (!/^[\\w.@+-]+$/i.test(values.username)) {\r\n                    errors.username = \"Invalid username!\";\r\n                } else if (values.username.length > 150) {\r\n                    errors.username =\r\n                        \"Too much longer username, max 150 symbols!\";\r\n                }\r\n                if (values.first_name.length > 30) {\r\n                    errors.first_name =\r\n                        \"Too much longer first name, min 30 symbols\";\r\n                }\r\n                if (values.last_name.length > 150) {\r\n                    errors.last_name =\r\n                        \"Too much longer last name, min 150 symbols\";\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = \"Required!\";\r\n                } else if (\r\n                    !/^(?=.*[A-Z])(?=.*\\d).{8,}$/i.test(values.password)\r\n                ) {\r\n                    errors.password = \"Invalid password!\";\r\n                } else if (values.password.length > 128) {\r\n                    errors.password =\r\n                        \"Too much longer password, min 128 symbols\";\r\n                }\r\n                return errors;\r\n            },\r\n            onSubmit: (values) => {\r\n                handleOnSubmit({\r\n                    username: values.username.trim(),\r\n                    first_name: values.first_name,\r\n                    last_name: values.last_name,\r\n                    password: values.password,\r\n                    is_active: true,\r\n                });\r\n            },\r\n        });\r\n\r\n        return (\r\n            <div className={classes.block}>\r\n                <div className={classes.block__container}>\r\n                    <form\r\n                        className={classes.block__form}\r\n                        onSubmit={formik.handleSubmit}\r\n                    >\r\n                        <div className={classes.block__title}>\r\n                            <h3>{formLabel}</h3>\r\n                        </div>\r\n                        <div className={classes.block__inputs}>\r\n                            <Input\r\n                                label={\"Username\"}\r\n                                placeholder={\"Please, put your username\"}\r\n                                errorCondition={\r\n                                    !!formik.errors.username &&\r\n                                    formik.touched.username\r\n                                }\r\n                                errorText={formik.errors.username}\r\n                                {...formik.getFieldProps(\"username\")}\r\n                            />\r\n                            <Input\r\n                                label={\"First name\"}\r\n                                placeholder={\"Please, put your first name\"}\r\n                                errorCondition={\r\n                                    !!formik.errors.first_name &&\r\n                                    formik.touched.first_name\r\n                                }\r\n                                errorText={formik.errors.first_name}\r\n                                {...formik.getFieldProps(\"first_name\")}\r\n                            />\r\n                            <Input\r\n                                label={\"Last name\"}\r\n                                placeholder={\"Please, put your last name\"}\r\n                                errorCondition={\r\n                                    !!formik.errors.last_name &&\r\n                                    formik.touched.last_name\r\n                                }\r\n                                errorText={formik.errors.last_name}\r\n                                {...formik.getFieldProps(\"last_name\")}\r\n                            />\r\n                            <Input\r\n                                label={\"Password\"}\r\n                                type={\"password\"}\r\n                                placeholder={\"Please, put your password\"}\r\n                                errorCondition={\r\n                                    !!formik.errors.password &&\r\n                                    formik.touched.password\r\n                                }\r\n                                errorText={formik.errors.password}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                        </div>\r\n                        <div className={classes.block__buttons}>\r\n                            <Button\r\n                                type={\"submit\"}\r\n                                btnName={btnName}\r\n                                disabled={\r\n                                    !formik.isValid ||\r\n                                    isLoading ||\r\n                                    !formik.values.username\r\n                                }\r\n                                btnType={\"green\"}\r\n                            />\r\n                            <Button\r\n                                btnName={\"Reset\"}\r\n                                type={\"reset\"}\r\n                                onClick={() => formik.resetForm()}\r\n                            />\r\n                        </div>\r\n                        {error && (\r\n                            <div className={classes.infoTextRed}>{error}</div>\r\n                        )}\r\n                        {isLoading && (\r\n                            <div className={classes.loading}>...Loading</div>\r\n                        )}\r\n                    </form>\r\n                    <div className={classes.links} onClick={backHandler}>\r\n                        <NavItem\r\n                            path={\"/emphasoft-test/users-list\"}\r\n                            title={\"Back to users list\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Form from \"../../components/form/Form\";\r\nimport { NewUserType } from \"../../services/user-api\";\r\n\r\ntype CreateNewUserPageType = {\r\n    isLoading: boolean;\r\n    error: string;\r\n    handleOnSubmit: (data: NewUserType) => void;\r\n};\r\n\r\nconst CreateNewUserPage: React.FC<CreateNewUserPageType> = React.memo(\r\n    ({ error, isLoading, handleOnSubmit }) => {\r\n        return (\r\n            <Form\r\n                formLabel={\"Create new user\"}\r\n                btnName={\"Create\"}\r\n                isLoading={isLoading}\r\n                error={error}\r\n                handleOnSubmit={handleOnSubmit}\r\n            />\r\n        );\r\n    }\r\n);\r\n\r\nexport default CreateNewUserPage;\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Preloader } from \"../../components/preloader/Preloader\";\r\nimport { NewUserType } from \"../../services/user-api\";\r\nimport { StatusType } from \"../../store/reducers/auth-reducer\";\r\nimport { createNewUserTC } from \"../../store/reducers/user-reducer\";\r\nimport { RootStateType } from \"../../store/store\";\r\nimport CreateNewUserPage from \"./CreateNewUserPage\";\r\n\r\ntype CreateNewUserPageStateType = {\r\n    isLoggedSuccess: boolean;\r\n    isLoading: boolean;\r\n    initApp: StatusType;\r\n    error: string;\r\n};\r\n\r\ntype PageType = {\r\n    isCreateSuccess: boolean;\r\n};\r\n\r\nconst CreateNewUserPageContainer = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isLoggedSuccess, isLoading, initApp, error } = useSelector<\r\n        RootStateType,\r\n        CreateNewUserPageStateType\r\n    >((state) => state.auth);\r\n    const { isCreateSuccess } = useSelector<RootStateType, PageType>(\r\n        (state) => state.user\r\n    );\r\n\r\n    const handleOnSubmit = useCallback((data: NewUserType) => {\r\n        dispatch(createNewUserTC(data));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (initApp === \"loading\") {\r\n        return <Preloader />;\r\n    }\r\n\r\n    if (!isLoggedSuccess) {\r\n        return <Redirect to={\"/emphasoft-test/login\"} />;\r\n    }\r\n\r\n    if (isCreateSuccess) {\r\n        return <Redirect to={\"/emphasoft-test/users-list\"} />;\r\n    }\r\n\r\n    return (\r\n        <CreateNewUserPage\r\n            isLoading={isLoading}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n        />\r\n    );\r\n};\r\n\r\nexport default CreateNewUserPageContainer;\r\n","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button } from \"../../components/button/Button\";\r\nimport { Input } from \"../../components/input/Input\";\r\nimport classes from \"./LoginPage.module.scss\";\r\n\r\ntype RestorePropsType = {\r\n    isLoggedSuccess: boolean;\r\n    isLoading: boolean;\r\n    error: string;\r\n    handleOnSubmit: (username: string, password: string) => void;\r\n};\r\n\r\ntype FormikErrorType = {\r\n    username?: string;\r\n    password?: string;\r\n};\r\n\r\nconst LoginPage: React.FC<RestorePropsType> = React.memo(\r\n    ({ error, isLoading, handleOnSubmit, isLoggedSuccess }) => {\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                username: \"\",\r\n                password: \"\",\r\n            },\r\n            validate: (values) => {\r\n                const errors: FormikErrorType = {};\r\n                if (!values.username) {\r\n                    errors.username = \"Required!\";\r\n                } else if (!/^[\\w.@+-]+$/i.test(values.username)) {\r\n                    errors.username = \"Invalid username!\";\r\n                } else if (values.username.length > 150) {\r\n                    errors.username =\r\n                        \"Too much longer username, max 150 symbols!\";\r\n                }\r\n                if (!values.password) {\r\n                    errors.password = \"Required!\";\r\n                } else if (\r\n                    !/^(?=.*[A-Z])(?=.*\\d).{8,}$/i.test(values.password)\r\n                ) {\r\n                    errors.password = \"Invalid password!\";\r\n                } else if (values.password.length > 128) {\r\n                    errors.password =\r\n                        \"Too much longer password, min 128 symbols\";\r\n                }\r\n                return errors;\r\n            },\r\n            onSubmit: (values) => {\r\n                handleOnSubmit(values.username.trim(), values.password);\r\n            },\r\n        });\r\n\r\n        return (\r\n            <div className={classes.login}>\r\n                <div className={classes.login__container}>\r\n                    <form\r\n                        className={classes.login__form}\r\n                        onSubmit={formik.handleSubmit}\r\n                    >\r\n                        <div className={classes.login__title}>\r\n                            <h3>Login page</h3>\r\n                        </div>\r\n                        <div className={classes.login__inputs}>\r\n                            <Input\r\n                                label={\"Username\"}\r\n                                placeholder={\"Please, put your username\"}\r\n                                errorCondition={\r\n                                    !!formik.errors.username &&\r\n                                    formik.touched.username\r\n                                }\r\n                                errorText={formik.errors.username}\r\n                                {...formik.getFieldProps(\"username\")}\r\n                            />\r\n                            <Input\r\n                                label={\"Password\"}\r\n                                type={\"password\"}\r\n                                placeholder={\"Please, put your password\"}\r\n                                errorCondition={\r\n                                    !!formik.errors.password &&\r\n                                    formik.touched.password\r\n                                }\r\n                                errorText={formik.errors.password}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                        </div>\r\n                        <div className={classes.login__buttons}>\r\n                            <Button\r\n                                type={\"submit\"}\r\n                                btnName={\"Login\"}\r\n                                disabled={\r\n                                    !formik.isValid ||\r\n                                    isLoading ||\r\n                                    !formik.values.username\r\n                                }\r\n                                btnType={\"green\"}\r\n                            />\r\n                            <Button\r\n                                btnName={\"Reset\"}\r\n                                type={\"reset\"}\r\n                                onClick={() => formik.resetForm()}\r\n                            />\r\n                        </div>\r\n                        {error && (\r\n                            <div className={classes.infoTextRed}>{error}</div>\r\n                        )}\r\n                        {isLoading && (\r\n                            <div className={classes.loading}>...Loading</div>\r\n                        )}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nexport default LoginPage;\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Preloader } from \"../../components/preloader/Preloader\";\r\nimport {\r\n    logInUserInAppTC,\r\n    setLoginUserData,\r\n    StatusType,\r\n} from \"../../store/reducers/auth-reducer\";\r\nimport { RootStateType } from \"../../store/store\";\r\nimport LoginPage from \"./LoginPage\";\r\n\r\ntype LoginPageStateType = {\r\n    isLoading: boolean;\r\n    isLoggedSuccess: boolean;\r\n    initApp: StatusType;\r\n    error: string;\r\n};\r\n\r\nconst LoginPageContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const { isLoggedSuccess, isLoading, initApp, error } = useSelector<\r\n        RootStateType,\r\n        LoginPageStateType\r\n    >((state) => state.auth);\r\n\r\n    const handleOnSubmit = useCallback((username: string, password: string) => {\r\n        dispatch(setLoginUserData({ username, password }));\r\n        dispatch(logInUserInAppTC({ username, password }));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (initApp === \"loading\") {\r\n        return <Preloader />;\r\n    }\r\n\r\n    if (isLoggedSuccess) {\r\n        return <Redirect to={\"/emphasoft-test/users-list\"} />;\r\n    }\r\n\r\n    return (\r\n        <LoginPage\r\n            isLoading={isLoading}\r\n            isLoggedSuccess={isLoggedSuccess}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoginPageContainer;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button } from \"../../components/button/Button\";\r\nimport { RootStateType } from \"../../store/store\";\r\nimport classes from \"./PageNotFound.module.scss\";\r\n\r\nexport const PageNotFound = () => {\r\n    const isLoggedSuccess = useSelector<RootStateType, boolean>(\r\n        (state) => state.auth.isLoggedSuccess\r\n    );\r\n    const history = useHistory();\r\n\r\n    const buttonHandler = () => {\r\n        if (isLoggedSuccess) {\r\n            history.push(\"emphasoft-test/users-list\");\r\n        } else {\r\n            history.push(\"emphasoft-test/login\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.wrap}>\r\n            <h2 className={classes.title}>404</h2>\r\n            <h3 className={classes.subtitle}>Sorry, the page not found...</h3>\r\n            <Button\r\n                btnName={\"Go back\"}\r\n                btnType={\"green\"}\r\n                onClick={buttonHandler}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Form from \"../../components/form/Form\";\r\nimport { NewUserType } from \"../../services/user-api\";\r\n\r\ntype UpdateUserPageType = {\r\n    isLoading: boolean;\r\n    error: string;\r\n    handleOnSubmit: (data: NewUserType) => void;\r\n    backHandler: () => void;\r\n};\r\n\r\nconst UpdateUserPage: React.FC<UpdateUserPageType> = React.memo(\r\n    ({ error, isLoading, handleOnSubmit, backHandler }) => {\r\n        return (\r\n            <Form\r\n                formLabel={\"Update user\"}\r\n                btnName={\"Update\"}\r\n                isLoading={isLoading}\r\n                error={error}\r\n                handleOnSubmit={handleOnSubmit}\r\n                backHandler={backHandler}\r\n            />\r\n        );\r\n    }\r\n);\r\n\r\nexport default UpdateUserPage;\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Preloader } from \"../../components/preloader/Preloader\";\r\nimport { NewUserType } from \"../../services/user-api\";\r\nimport { StatusType } from \"../../store/reducers/auth-reducer\";\r\nimport {\r\n    setCheckedUserIdForUpdating,\r\n    updateUserTC,\r\n} from \"../../store/reducers/user-reducer\";\r\nimport { RootStateType } from \"../../store/store\";\r\nimport UpdateUserPage from \"./UpdateUserPage\";\r\n\r\ntype UpdateUserPageStateType = {\r\n    isLoggedSuccess: boolean;\r\n    isLoading: boolean;\r\n    initApp: StatusType;\r\n    error: string;\r\n};\r\n\r\ntype PageType = {\r\n    isUpdateSuccess: boolean;\r\n};\r\n\r\nconst UpdateUserPageContainer = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isLoggedSuccess, isLoading, initApp, error } = useSelector<\r\n        RootStateType,\r\n        UpdateUserPageStateType\r\n    >((state) => state.auth);\r\n    const { isUpdateSuccess } = useSelector<RootStateType, PageType>(\r\n        (state) => state.user\r\n    );\r\n\r\n    const handleOnSubmit = useCallback((data: NewUserType) => {\r\n        dispatch(updateUserTC(data));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const backHandler = useCallback(() => {\r\n        dispatch(setCheckedUserIdForUpdating(null));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (initApp === \"loading\") {\r\n        return <Preloader />;\r\n    }\r\n\r\n    if (!isLoggedSuccess) {\r\n        return <Redirect to={\"/emphasoft-test/login\"} />;\r\n    }\r\n\r\n    if (isUpdateSuccess) {\r\n        return <Redirect to={\"/emphasoft-test/users-list\"} />;\r\n    }\r\n\r\n    return (\r\n        <UpdateUserPage\r\n            isLoading={isLoading}\r\n            error={error}\r\n            handleOnSubmit={handleOnSubmit}\r\n            backHandler={backHandler}\r\n        />\r\n    );\r\n};\r\n\r\nexport default UpdateUserPageContainer;\r\n","import { Button } from \"../../components/button/Button\";\r\nimport { ListUserType } from \"../../services/user-api\";\r\nimport classes from \"./UsersListPage.module.scss\";\r\n\r\ntype PropsType = {\r\n    allUsers: Array<ListUserType>;\r\n    isLoading: boolean;\r\n    error: string;\r\n    updateUserHandler: (userId: number) => void;\r\n};\r\n\r\nconst UsersListPage: React.FC<PropsType> = ({\r\n    allUsers,\r\n    isLoading,\r\n    error,\r\n    updateUserHandler,\r\n}) => {\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.usersList}>\r\n                <h3>Users list page</h3>\r\n                {error ? (\r\n                    <div className={classes.infoTextRed}>{error}</div>\r\n                ) : (\r\n                    allUsers.map((u) => (\r\n                        <div key={u.id} className={classes.userCard}>\r\n                            <div className={classes.infoBlock}>\r\n                                <div>First name: {u.first_name}</div>\r\n                                <div>Last name: {u.last_name}</div>\r\n                                <div>Username: {u.username}</div>\r\n                                <div>Last login: {u.last_login}</div>\r\n                                <div>Is active: {u.is_active?.toString()}</div>\r\n                                <div>\r\n                                    Is superuser: {u.is_superuser?.toString()}\r\n                                </div>\r\n                            </div>\r\n                            <Button\r\n                                btnName={\"Update\"}\r\n                                btnType={\"green\"}\r\n                                onClick={() => {\r\n                                    updateUserHandler(u.id);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UsersListPage;\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Preloader } from \"../../components/preloader/Preloader\";\r\nimport { ListUserType } from \"../../services/user-api\";\r\nimport { StatusType } from \"../../store/reducers/auth-reducer\";\r\nimport {\r\n    fetchAllUsers,\r\n    setCheckedUserIdForUpdating,\r\n} from \"../../store/reducers/user-reducer\";\r\nimport { RootStateType } from \"../../store/store\";\r\nimport UsersListPage from \"./UsersListPage\";\r\n\r\ntype UsersListPageStateType = {\r\n    isLoading: boolean;\r\n    isLoggedSuccess: boolean;\r\n    initApp: StatusType;\r\n    error: string;\r\n    token: string;\r\n};\r\n\r\ntype allUsersType = {\r\n    allUsers: Array<ListUserType>;\r\n    checkedUserForUpdatingId: number | null;\r\n};\r\n\r\nconst UsersListPageContainer = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isLoggedSuccess, isLoading, initApp, error, token } = useSelector<\r\n        RootStateType,\r\n        UsersListPageStateType\r\n    >((state) => state.auth);\r\n    const { allUsers, checkedUserForUpdatingId } = useSelector<\r\n        RootStateType,\r\n        allUsersType\r\n    >((state) => state.user);\r\n\r\n    const updateUserHandler = useCallback((userId: number) => {\r\n        dispatch(setCheckedUserIdForUpdating(userId));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchAllUsers(token));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    if (initApp === \"loading\") {\r\n        return <Preloader />;\r\n    }\r\n\r\n    if (checkedUserForUpdatingId) {\r\n        return <Redirect to={\"/emphasoft-test/update-user\"} />;\r\n    }\r\n\r\n    if (!isLoggedSuccess) {\r\n        return <Redirect to={\"/emphasoft-test/login\"} />;\r\n    }\r\n\r\n    return (\r\n        <UsersListPage\r\n            allUsers={allUsers}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            updateUserHandler={updateUserHandler}\r\n        />\r\n    );\r\n};\r\n\r\nexport default UsersListPageContainer;\r\n","import { Route, Switch } from \"react-router-dom\";\r\nimport CreateNewUserPageContainer from \"../../pages/createNewUserPage/CreateNewUserPageContainer\";\r\nimport LoginPageContainer from \"../../pages/loginPage/LoginPageContainer\";\r\nimport { PageNotFound } from \"../../pages/page404/PageNotFound\";\r\nimport UpdateUserPageContainer from \"../../pages/updateUserPage/UpdateUserPageContainer\";\r\nimport UsersListPageContainer from \"../../pages/usersList/UsersListPageContainer\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route\r\n                path={\"/emphasoft-test/update-user\"}\r\n                render={() => <UpdateUserPageContainer />}\r\n            />\r\n            <Route\r\n                path={\"/emphasoft-test/create-new-user\"}\r\n                render={() => <CreateNewUserPageContainer />}\r\n            />\r\n            <Route\r\n                path={\"/emphasoft-test/users-list\"}\r\n                render={() => <UsersListPageContainer />}\r\n            />\r\n            <Route\r\n                path={\"/emphasoft-test/login\"}\r\n                render={() => <LoginPageContainer />}\r\n            />\r\n            <Route\r\n                exact\r\n                path={\"/emphasoft-test/\"}\r\n                render={() => <LoginPageContainer />}\r\n            />\r\n            <Route path={\"*\"} render={() => <PageNotFound />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import classes from \"./App.module.scss\";\nimport Header from \"./components/header/Header\";\nimport Routes from \"./components/routes/Routes\";\n\nfunction App() {\n    return (\n        <div className={classes.main}>\n            <Header />\n            <Routes />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { authSlice } from \"./reducers/auth-reducer\";\r\nimport { userSlice } from \"./reducers/user-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    auth: authSlice.reducer,\r\n    user: userSlice.reducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>;\r\nexport type AppDispatchType = typeof store.dispatch;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}